<project name="x360MediaServer" default="build" basedir=".">

	<target name="init">
		<tstamp>
			<format property="year" pattern="yyyy" locale="en" />
		</tstamp>

		<!-- declare ant4eclipse -->
		<taskdef resource="net/sf/ant4eclipse/antlib.xml" />
		<property name="workspace" value="${basedir}/.." />
		<property name="project.name" value="x360MediaServer" />
		<property name="targetPlatformLocation" value="C:/Program Files/eclipse" />



		<property file="build.properties" />
		<property name="Name" value="x360MediaServer" />
		<property name="name" value="x360MediaServer" />
		<property name="version" value="beta" />

		<property name="build.compiler" value="modern" />
		<property name="debug" value="off" />
		<property name="optimize" value="on" />
		<property name="deprecation" value="on" />


		<!-- Define the source directories -->
		<property name="root.dir" value="./" />
		<property name="doc.dir" value="${root.dir}/doc" />


		<!-- Define the source build directories -->
		<property name="doc.apidocs" value="${doc.dir}/api" />
		<property name="build.dir" value="${root.dir}/build" />



		<!-- resolve the eclipse output location -->
		<getOutputpath property="classes.dir" workspace="${workspace}" projectName="${project.name}" />

		<!-- resolve the eclipse source location -->
		<getSourcepath property="source.dir" workspace="${workspace}" projectName="${project.name}" />

		<!-- read the eclipse classpath -->
		<getEclipseClasspath pathId="build.classpath" targetPlatformLocation="${targetPlatformLocation}" workspace="${workspace}" projectName="${project.name}" />

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target name="prepare" depends="init">
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir}" />

		<delete dir="${classes.dir}" />
		<mkdir dir="${classes.dir}" />
	</target>


	<!-- =================================================================== -->
	<!-- Compiles the Media Server source code                               -->
	<!-- =================================================================== -->
	<target name="compile" depends="prepare">
		<javac 
			srcdir="${root.dir}" 
			destdir="${classes.dir}" 
			classpathref="build.classpath"
			debug="${debug}"
			deprecation="${deprecation}" 
			optimize="${optimize}"/>
		<!-- verbose="true" -->
	</target>


	<!-- ================================= -->
	<!-- target: build               	   -->
	<!-- ================================= -->

	<target name="build" depends="init, compile">
		<!-- copy cybergarage over! -->
		<delete dir="${classes.dir}/org" />
		<mkdir dir="${classes.dir}/org" />
        <copy todir="${classes.dir}/org">
            <fileset dir="${root.dir}/../cybergarage/build/org"/>
        </copy>
		
		<!-- copy the icons over! -->
		<delete dir="${classes.dir}/files" />
        <mkdir dir="${classes.dir}/files" />
		<copy todir="${classes.dir}/files">
            <fileset dir="${root.dir}/files"/>
        </copy>
		
		<!-- copy libraries over! -->
		<delete dir="${classes.dir}/lib" />
        <mkdir dir="${classes.dir}/lib" />
		<mkdir dir="${classes.dir}/lib/entagged" />
        <copy todir="${classes.dir}/lib/entagged">
            <fileset
            	dir="${root.dir}/lib/entagged" >
                <include name= "*.jar"/>
            </fileset>
        </copy>
		
		<!-- Build the JAR file -->
		<jar jarfile="${build.dir}/${name}.jar" 
			basedir="${classes.dir}"
			includes="**">
			<zipfileset src="${root.dir}/../swtLoader/dist/siswt.jar"/>
			<manifest>
				<attribute name="Main-Class" value="Run" />
				<attribute name="Product-Version" value=".05" />
				<attribute name="Build-Date" value="${TODAY}" />
			</manifest>
		</jar>

	</target>


	<!-- =================================================================== -->
	<!-- Clean restores the distribution to original state                   -->
	<!-- =================================================================== -->
	<target name="clean" depends="init">
		<delete dir="${build.dir}" />
		<delete dir="${classes.dir}" />
		<delete dir="${doc.apidocs}" />
	</target>

	<!-- =================================================================== -->
	<!-- Fix tabs and line endings on java source files                      -->
	<!-- =================================================================== -->
	<target name="fixtabs" depends="init">
		<fixcrlf srcdir="${src.dir}" eol="lf" eof="remove" tablength="4" tab="remove" includes="**/*.java" />
	</target>

	<!-- =================================================================== -->
	<!-- Replace all sequences of 4 spaces in .java files with a tab         -->
	<!-- =================================================================== -->
	<target name="addTabsWithLength4" depends="init">
		<fixcrlf srcdir="${root.dir}" tab="add" tablength="4" includes="**/*.java" />
	</target>

	<!-- =================================================================== -->
	<!-- Replace all tabs in .java files with a sequence of 4 spaces         -->
	<!-- =================================================================== -->
	<target name="removeTabsWithLength4" depends="init">
		<fixcrlf srcdir="${root.dir}" tab="remove" tablength="4" includes="**/*.java" />
	</target>

</project>